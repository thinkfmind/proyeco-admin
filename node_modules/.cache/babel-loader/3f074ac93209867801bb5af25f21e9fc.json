{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = _ref => {\n  _s();\n\n  let {\n    url,\n    options,\n    initData\n  } = _ref;\n  const [response, setResponse] = useState(null || initData);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return {\n    response,\n    error,\n    isLoading\n  };\n};\n\n_s(useFetch, \"mOScaDUB1GdQcw/Cwi3dMyviG1E=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/augusto/Desktop/proyeco-front/src/hooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","options","initData","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","res","fetch","json"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,QAAgC;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,GAA+B;AAC/C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,QAAQI,QAAT,CAAxC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,SAAS,GAAG,YAAY;AAC5BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAME,GAAG,GAAG,MAAMC,KAAK,CAACX,GAAD,EAAMC,OAAN,CAAvB;AACA,cAAMW,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AAEAR,QAAAA,WAAW,CAACQ,IAAD,CAAX;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOH,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KAZD;;AAcAI,IAAAA,SAAS;AACV,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAO;AAAEN,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAxBD;;GAAMR,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useFetch = ({ url, options, initData }) => {\n  const [response, setResponse] = useState(null || initData);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { response, error, isLoading };\n};\n\nexport default useFetch"]},"metadata":{},"sourceType":"module"}